%% Initialization

close all
clear
clc

%% Inputing and converting the Data to .mat

read_and_convert_tdms = 0; 

folder  = './Delta10/';

if read_and_convert_tdms == 1
    file_type = '*.tdms';
else
    file_type = '*.mat';    
end
%Exp = {'Exp1' , 'Exp2', 'Exp3' , 'Exp4', 'Exp5'}; % Experiments number
nameFiles = dir(strcat(folder,file_type));
files = {nameFiles.name}; 

for i=1:size(files,2)
    
    file{i} = strcat(folder,files{:,i});   
    if read_and_convert_tdms == 1;
        matFileName=simpleConvertTDMS(file{i});  
        DATA(i) = load(cell2mat(matFileName));
    else
        DATA(i) = load(file{i});   
    end
    
    
    p = files{:,i}(13:end-4);
    p =cellstr(p);
    
    
    
    
end

%% Preparing the Data for Estimation




Channel_e = sgolayfilt(DATA(2).crio_databendflapblade3DMS02.Data,3,3501); % Savitzky-Golay filtering
Channel_v = sgolayfilt(DATA(5).crio_databendflapblade3DMS02.Data,3,3501);

grad = gradient(Channel_e);

trigger_channel_index_neg = find(grad<=min(grad));  
trigger_channel_index_pos = find(grad>=max(grad));        %% must be set so that it is capable on reading the data you need.    

if trigger_channel_index_neg>trigger_channel_index_pos;                   
     p1 = ones(size(Channel_e(1:trigger_channel_index_pos))) .* mean(Channel_e(1:trigger_channel_index_pos));
     p2 = Channel_e(trigger_channel_index_pos+1:trigger_channel_index_neg);
     p3 = ones(size(Channel_e(trigger_channel_index_neg+1:end))) .* mean(Channel_e(trigger_channel_index_neg+1:end));
else
     p1 = ones(size(Channel_e(1:trigger_channel_index_neg))) .* mean(Channel_e(1:trigger_channel_index_neg));
     p2 = Channel_e(trigger_channel_index_neg+1:trigger_channel_index_pos);
     p3 = ones(size(Channel_e(trigger_channel_index_pos+1:end))) .* mean(Channel_e(trigger_channel_index_pos+1:end));
end

ye = [p1;p2;p3];

%% Callibration voltage to degree input

Fs = 10*10^3;
Ts = 1/Fs;

Step_response = DATA(2).crio_dataservo1setpointAI313.Data;

Step_change_start = str2double(p{1,1}(1:3));

Step_change_final = str2double(p{1,1}(6:8));

t = length(ye)*Ts;

if Step_change_final == 0
    LHS = @(c) c*(Step_change_start) + mean(Step_response);
    RHS = mean(Step_response);
    c = fzero(@(c) - RHS + LHS(c),1);
else
    LHS = @(c) c*(Step_change_final) + mean(Step_response);
    RHS = mean(Step_response);
    c = fzero(@(c) - RHS + LHS(c),1);
end

Degree = (Step_response - mean(Step_response))./c;
%% System Identification



ze = iddata(ye, DATA(2).crio_dataservo1setpointAI313.Data,Ts);
zv = iddata(Channel_v, DATA(5).crio_dataservo1setpointAI313.Data,Ts);

% ze = detrend(ze); % Remove trends from data for better prediction
% zv = detrend(zv);


